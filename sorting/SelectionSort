/*
  Selection Sort:
  ***************
  This sorting algorithm is a in-place comparison based algorithm in which the list is divided into two parts, 
  sorted part at left end and unsorted part at right end. Initially sorted part is empty and unsorted part is entire list.
  Smallest element is selected from the unsorted array and swapped with the leftmost element and that element becomes part 
  of sorted array. This process continues moving unsorted array boundary by one element to the right.

  Complexity: O(n^2)
  
  PseudoCode:
    repeat (numOfElements - 1) times
      set the first unsorted element as the minimum
      for each of the unsorted elements
        if element < currentMinimum
          set element as new minimum
      swap minimum with first unsorted position
*/

function selectionSort(items){
    var len = items.length;
    var min;

    for (i=0; i < len; i++){
        
        //set minimum to this position
        min = i;
        
        //check the rest of the array to see if anything is smaller
        for (j=i+1; j < len; j++){
            if (items[j] < items[min]){
                min = j;
            }
        }

        //if the minimum isn't in the position, swap it
        if (i != min){
            swap(items, i, min);
        }
    }
    return items;
}

function swap(items, firstIndex, secondIndex){
    var temp = items[firstIndex];
    items[firstIndex] = items[secondIndex];
    items[secondIndex] = temp;
}
